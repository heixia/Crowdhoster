
<style>

path {
  stroke: #945823;
  stroke-width:1px;
  fill: #2E2D2B;
    }

</style>




<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>


<div class="row">
  <div id="mapbox" class="large-10 columns"></div>
  <div class="large-2 columns buttonbox"</div>
    <button class="rubyfilter">ruby</button><br><button class = "jsfilter">javascript</button><br><button class="pythonfilter">python</button></br><button class = "allfilter">all</button>
  </div>
</div>

<div class="row bootcamp-list">
  <div class="large-4 columns">
    <h3>United States</h3>
    <h4>West Coast</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.west_coast.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <h4>Mountain States</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.mountain.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
  </div>
  <div class="large-4 columns">
    <h3>  &nbsp; </h3>
    <h4>Midwest</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.midwest.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <h4>South/Southwest</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.south.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
      <% Bootcamp.published.southwest.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <h4>East Coast</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.east_coast.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
  </div>
  <div class="large-4 columns">
    <h3>Canada</h3>
    <h4>Ontario</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.ontario.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <h4>British Columbia</h4>
    <ul id="bootcamplist">
      <% Bootcamp.published.british_columbia.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <ul id="bootcamplist">
    <h3>Outside North America</h3>
    <% Bootcamp.published.rest_of_world.each do |camp| %>
        <li class="bootcamp-li" id="<%= camp.name.gsub(" ","-").downcase %>link" data-primary_language="<%= camp.primary_language %>"><%= link_to("#{camp.name}", camp )  %></li>
      <% end %>
    </ul>
    <!--  -->
  </div>
</div>
<div class='row'>
  <div class="large-8 columns centered">
    <button class="rubyfilter" class="tiny">ruby</button><button class="jsfilter" class="tiny">javascript</button><button class="pythonfilter">python</button><button class="allfilter" class="tiny">all</button>
  </div>
</div>

<script>
// set the size of our map
var width = 800;
    height = 550;

// set up the view of the map
// projections adjusts the display for 2D screens. 
// projections distory land size and shape, choose wisely
// Mercator is conservative option 
var projection = d3.geo.mercator()
    .center([80,40]) // default [0,0], North America [100,30]
    .scale(500)    // default (150). zoom in w/ > values
    .rotate([-190,0]); // [longitude, latitude, roll], def [0,0,0]

// create svg window
var svg = d3.select("#mapbox").append("svg")
    .attr("width", width)
    .attr("height", height);
// geo path generator used to specify projection type
var path = d3.geo.path()
    .projection(projection);
// g is our appended svg
var g = svg.append("g");



// load and display the world, draws the map for us.
d3.json("/assets/world.json", function(error, topology) {
    g.selectAll("path")
        .data(topojson.feature(topology, topology.objects.countries)
            .features)
        .data(topojson.feature(topology, topology.objects.countries)
            .features) // data that defines countries
      .enter()
        .append("path") // act on all path elements
        .attr("d", path); // add data we're going to display

// add our bootcamps to their geo-location

<% @bootcamps.each_with_index do |camp, index| %>
var lat = (<%= camp.lat %>);
var lon = (<%= camp.lon %>);
var coords = projection([lon,lat]);
var ci = <%= camp.city_index %>
var colors = ["teal", "red", "brown"]
var rand = Math.floor(Math.random()*colors.length)
// template for adding cities with Ruby script 
g.append("circle")
    .attr("class", "logo")
    .attr("data-primary_language", "<%= camp.primary_language %>")
    .attr("id", "<%= camp.name.gsub(" ","-").downcase %>")
    .attr("data-name", "<%= camp.name %>")
    .attr("data-city", "<%= camp.city %>")
    .attr("data-num_in_city", <%= Bootcamp.num_in_city(camp.city)  %>)
    .attr("cx", coords[0])
    .attr("cx", coords[0]+((2-ci)*10))
    .attr("cy", coords[1]+((2-ci)*5))
    .attr("r", 3)
    .attr("fill", "url(#image<%= index %>)")
    .attr("fill", "#FFFCF4")
    .attr("stroke", "white")
    .attr("stroke-width", 0.25)
    .on("mouseover", function(){ 
      d3.select(this)
         .transition().attr("r", 20).duration(50)
         .style("fill", "url(#hoverimage<%= index %>)")
         
     })
     .on("mouseout", function(){ 
      d3.select(this)
         .transition().attr("r", 3).duration(50)
         .style("fill", "#FFFCF4");
     })
     


    <% end %>

$('svg circle').tipsy({ 
        gravity: 's', 
        fade:true,
        fallback:"bootcamp",
        html: true, 
        title: function() {
          circle='#'+this.id
          name = $(circle).attr("data-name")
          city = $(circle).attr("data-city")
          return name+"<br/>("+city+")"
        }
});

$('svg circle').on("click", function() {
  document.location = "/bootcamps/" + this.id;
});

$(".bootcamp-li").on("mouseover", function(){
  var d = this.id.slice(0,-4);
  var bootcamp = $("#"+d);
  $("#"+d).attr("stroke", "purple").attr("stroke-width", 5);
});

$(".bootcamp-li").on("mouseout", function(){
  var d = this.id.slice(0,-4);
  $("#"+d).attr("stroke", "white").attr("stroke-width", .25);
})


$('.rubyfilter').on("click", function() {
  $('svg circle').show();
  $('.bootcamp-li').show();
  $('svg circle').not("[data-primary_language='Ruby on Rails']").hide();
  $(".bootcamp-li").not("[data-primary_language='Ruby on Rails']").hide();


}); 

$('.jsfilter').on("click", function() {
  $('svg circle').show();
  $('.bootcamp-li').show();
  $('svg circle').not("[data-primary_language='Javascript']").hide();
  $(".bootcamp-li").not("[data-primary_language='Javascript']").hide();
}); 

$('.pythonfilter').on("click", function() {
  $('svg circle').show();
  $('.bootcamp-li').show();
  $('svg circle').not("[data-primary_language='Python']").hide();
  $(".bootcamp-li").not("[data-primary_language='Python']").hide();
}); 

$(".allfilter").on("click", function(){
  $('svg circle').show();
  $(".bootcamp-li").show()
});
});




// moving and panning on the map: 
// var zoom = d3.behavior.zoom()
//     .scaleExtent([1,9])
//     .on("zoom", move); 

// svg.call(zoom)

// LIMITING THE RANGE OF ZOOMING BY SCROLL 
// function move() {
//   var t = d3.event.translate,
//       s = d3.event.scale;

//   t[0] = Math.min(width / 2 * (s - 1), Math.max(width / 2 * (1 - s), t[0]));
//   t[1] = Math.min(height / 2 * (s - 1) + 230 * s, Math.max(height / 2 * (1 - s) - 230 * s, t[1]));
//   zoom.translate(t);
//   g.style("stroke-width", 1 / s).attr("transform", "translate(" + t + ")scale(" + s + ")");
// }


</script>


<svg id="logos" width="80" height="80">
  <defs id="mydefs">
  <% @bootcamps.each_with_index do |camp, index| %>
    <pattern id="image<%= index %>" x="0" y="0" height="40" width="40">
      <image width="20" height="20" xlink:href="<%= image_path(camp.name.downcase.gsub(" ", "-")+'.png') %>"></image>
    </pattern>
  <% end %>
  </defs>

<svg id="hoverlogos" width="160" height="160">
  <defs id="mydefs">
    <% @bootcamps.each_with_index do |camp, index| %>
    <pattern id="hoverimage<%= index %>" x="0" y="0" height="80" width="80">
      <image width="40" height="40" xlink:href="<%= image_path(camp.name.downcase.gsub(" ", "-")+'.png') %>"></image>
    </pattern>
  <% end %>
  </defs>


<!-- est. pattern for logos to insert into d3 circle object -->
<!-- <svg id="mySvg" width="80" height="80">
  <defs id="mydefs">
    <pattern id="image" x="0" y="0" height="40" width="40">
      <image width="20" height="20" xlink:href=urlImagePath></image>
    </pattern>

    <pattern id="image1" x="0" y="0" height="40" width="40">
      <image width="20" height="20" xlink:href="http://scm-l3.technorati.com/12/12/13/73853/devbootcamp.png?t=20121213131231
"></image>
    </pattern>

    <pattern id="image2" x="0" y="0" height="40" width="40">
      <image width="20" height="20" xlink:href="http://cdn.skilledup.com/wp-content/uploads/2013/08/hacker-school.jpg"></image>
    </pattern>
  </defs> -->



</script>



